//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Ur
{
    [Serializable]
    public class SetIORequest : Message
    {
        public const string k_RosMessageName = "ur_msgs/SetIO";
        public override string RosMessageName => k_RosMessageName;

        //  Service allows setting digital (DIO) and analog (AIO) IO, as well as flags
        //  and configuring tool voltage.
        // 
        //  This service has three request fields (see below).
        // 
        //  When setting DIO or AIO pins to new values:
        // 
        //   fun    The function to perform
        //   pin    Numeric ID of the pin to set, see constants definition below
        //   state  Desired pin state (signal level for analog or STATE_(ON|OFF) for DIO and flags)
        // 
        //  When configuring tool voltage:
        // 
        //   fun    Set to FUN_SET_TOOL_VOLTAGE
        //   pin    Ignored
        //   state  Desired tool voltage (use STATE_TOOL_VOLTAGE constants)
        //  constants
        //  pin mapping
        //  analog out
        public const sbyte PIN_AOUT0 = 0;
        public const sbyte PIN_AOUT1 = 1;
        //  digital out
        public const sbyte PIN_DOUT0 = 0;
        public const sbyte PIN_DOUT1 = 1;
        public const sbyte PIN_DOUT2 = 2;
        public const sbyte PIN_DOUT3 = 3;
        public const sbyte PIN_DOUT4 = 4;
        public const sbyte PIN_DOUT5 = 5;
        public const sbyte PIN_DOUT6 = 6;
        public const sbyte PIN_DOUT7 = 7;
        //  configurable out
        public const sbyte PIN_CONF_OUT0 = 8;
        public const sbyte PIN_CONF_OUT1 = 9;
        public const sbyte PIN_CONF_OUT2 = 10;
        public const sbyte PIN_CONF_OUT3 = 11;
        public const sbyte PIN_CONF_OUT4 = 12;
        public const sbyte PIN_CONF_OUT5 = 13;
        public const sbyte PIN_CONF_OUT6 = 14;
        public const sbyte PIN_CONF_OUT7 = 15;
        //  digital tool output
        public const sbyte PIN_TOOL_DOUT0 = 16;
        public const sbyte PIN_TOOL_DOUT1 = 17;
        //  valid function values
        // 
        //  Note: 'fun' is short for 'function' (ie: the function the service should perform).
        public const sbyte FUN_SET_DIGITAL_OUT = 1;
        public const sbyte FUN_SET_FLAG = 2;
        public const sbyte FUN_SET_ANALOG_OUT = 3;
        public const sbyte FUN_SET_TOOL_VOLTAGE = 4;
        //  valid values for 'state' when setting digital IO or flags
        public const sbyte STATE_OFF = 0;
        public const sbyte STATE_ON = 1;
        //  valid 'state' values when setting tool voltage
        public const sbyte STATE_TOOL_VOLTAGE_0V = 0;
        public const sbyte STATE_TOOL_VOLTAGE_12V = 12;
        public const sbyte STATE_TOOL_VOLTAGE_24V = 24;
        //  request fields
        public sbyte fun;
        public sbyte pin;
        public float state;

        public SetIORequest()
        {
            this.fun = 0;
            this.pin = 0;
            this.state = 0.0f;
        }

        public SetIORequest(sbyte fun, sbyte pin, float state)
        {
            this.fun = fun;
            this.pin = pin;
            this.state = state;
        }

        public static SetIORequest Deserialize(MessageDeserializer deserializer) => new SetIORequest(deserializer);

        private SetIORequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.fun);
            deserializer.Read(out this.pin);
            deserializer.Read(out this.state);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.fun);
            serializer.Write(this.pin);
            serializer.Write(this.state);
        }

        public override string ToString()
        {
            return "SetIORequest: " +
            "\nfun: " + fun.ToString() +
            "\npin: " + pin.ToString() +
            "\nstate: " + state.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
